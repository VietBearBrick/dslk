	#include "iostream"
using namespace std;
typedef int TYPEINFO;
struct NODE
{
	TYPEINFO data;
	NODE* link;
};
typedef NODE* NODEPTR;
void Init(NODEPTR& list);
int Empty(NODEPTR list);
NODEPTR Tao_node(TYPEINFO x);
NODEPTR Them_dau(NODEPTR &list, TYPEINFO x);
void Nhap_ds(NODEPTR& list);
void Xuat_ds(NODEPTR list);
void GiaiPhong(NODEPTR& list);
NODEPTR Tim_node_x(NODEPTR list, TYPEINFO x);
NODEPTR Chensau_q(NODEPTR q,TYPEINFO x);


#include "Header.h"
	void Init(NODEPTR& list) {
		list = NULL;
	}
	int Empty(NODEPTR list) {
		return (list == NULL ? 1 : 0);
	}
	NODEPTR Tao_node(TYPEINFO x) {
		NODEPTR p;
		p = new NODE;
		p->data = x;
		p->link = NULL;
		return p;
	}
	NODEPTR Them_dau(NODEPTR &list, TYPEINFO x) {
		NODEPTR p;
		p = Tao_node(x);
		p->link = list;
		list = p;
		return p;
	}
	void Nhap_ds(NODEPTR& list) {
		Init(list);
		int x;
		do {
			cout << "nhap vao x= (thoat -99)";
			cin >> x;
			if (x == -99)
				break;
			Them_dau(list, x);//goi ham them??U
		} while (1);
	}
	void Xuat_ds(NODEPTR list) {
		NODEPTR p = list;
		while (p != NULL) {
			cout << p->data << " ";
			p = p->link;
		}
	}
	void GiaiPhong(NODEPTR& list) {
		NODEPTR p = list;
		while (p != NULL)
		{
			list = list->link;
			delete p;
			p = list;
		}
	}
	NODEPTR Tim_node_x(NODEPTR list, TYPEINFO x) {
		NODEPTR p = list;
		while (p != NULL)
		{
			if (p->data == x)
				return p;
			p = p -> link;
		}
		return p;
	}
NODEPTR Chensau_q(NODEPTR q,TYPEINFO x){
NODEPTR p=Tao_node(x);
p->link=q->link;
q->link=p
return q;
}

#include "Header.h"
void main()
{
	NODEPTR list;
	Init(list);
	Nhap_ds(list);
	cout << "DSLK vua nhap: ";
	Xuat_ds(list);
	GiaiPhong(list);
	system("pause");
}
